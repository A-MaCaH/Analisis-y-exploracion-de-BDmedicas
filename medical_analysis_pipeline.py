#!/usr/bin/env python3
"""
Pipeline completo de an√°lisis de im√°genes m√©dicas.
Incluye configuraci√≥n interactiva, ejecuci√≥n y visualizaci√≥n de resultados.
"""

import yaml
import os
import sys
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
from typing import Dict, List, Any
import numpy as np
from importlib import import_module
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class MedicalAnalysisPipeline:
    def __init__(self):
        self.config = {
            'general': {},
            'pipeline': []
        }
        self.data = None
        self.results = {}
        
    def print_header(self):
        """Imprime el encabezado del pipeline"""
        print("=" * 70)
        print("  üè• PIPELINE DE AN√ÅLISIS DE IM√ÅGENES M√âDICAS")
        print("=" * 70)
        print()
    
    def get_input(self, prompt: str, default: str = "", required: bool = True) -> str:
        """Obtiene entrada del usuario con validaci√≥n"""
        while True:
            if default:
                user_input = input(f"{prompt} [{default}]: ").strip()
                if not user_input:
                    user_input = default
            else:
                user_input = input(f"{prompt}: ").strip()
            
            if not required or user_input:
                return user_input
            print("‚ùå Este campo es obligatorio. Por favor, ingresa un valor.")
    
    def get_yes_no(self, prompt: str, default: str = "y") -> bool:
        """Obtiene respuesta s√≠/no del usuario"""
        while True:
            response = self.get_input(prompt, default).lower()
            if response in ['y', 'yes', 's√≠', 'si', '1']:
                return True
            elif response in ['n', 'no', '0']:
                return False
            print("‚ùå Por favor responde 'y' (s√≠) o 'n' (no).")
    
    def get_multiple_choice(self, prompt: str, options: List[str], default: int = 0) -> str:
        """Obtiene selecci√≥n m√∫ltiple del usuario"""
        print(f"\n{prompt}")
        for i, option in enumerate(options):
            marker = "‚Üí" if i == default else " "
            print(f"  {marker} {i+1}. {option}")
        
        while True:
            try:
                choice = input(f"\nSelecciona una opci√≥n [1-{len(options)}] [{default+1}]: ").strip()
                if not choice:
                    choice = default + 1
                else:
                    choice = int(choice)
                
                if 1 <= choice <= len(options):
                    return options[choice - 1]
                else:
                    print(f"‚ùå Por favor selecciona un n√∫mero entre 1 y {len(options)}.")
            except ValueError:
                print("‚ùå Por favor ingresa un n√∫mero v√°lido.")
    
    def get_multiple_selections(self, prompt: str, options: List[str]) -> List[str]:
        """Obtiene m√∫ltiples selecciones del usuario"""
        print(f"\n{prompt}")
        for i, option in enumerate(options):
            print(f"  {i+1}. {option}")
        
        while True:
            try:
                selections = input(f"\nSelecciona opciones (separadas por coma, ej: 1,3) [1-{len(options)}]: ").strip()
                if not selections:
                    return [options[0]]
                
                indices = [int(x.strip()) - 1 for x in selections.split(',')]
                if all(0 <= i < len(options) for i in indices):
                    return [options[i] for i in indices]
                else:
                    print(f"‚ùå Por favor selecciona n√∫meros entre 1 y {len(options)}.")
            except ValueError:
                print("‚ùå Por favor ingresa n√∫meros v√°lidos separados por coma.")
    
    def configure_pipeline(self):
        """Configura todo el pipeline de forma interactiva"""
        print("üîß CONFIGURACI√ìN INTERACTIVA DEL PIPELINE")
        print("-" * 50)
        
        # Configuraci√≥n general
        print("\nüìÅ CONFIGURACI√ìN GENERAL")
        print("-" * 30)
        
        metadata_path = self.get_input(
            "Ruta al archivo CSV/Excel con metadatos",
            "data/mnist_medical_metadata.csv"
        )
        self.config['general']['input_metadata_path'] = metadata_path
        
        images_dir = self.get_input(
            "Directorio con las im√°genes m√©dicas",
            "data/mnist_medical_images/"
        )
        self.config['general']['input_images_dir'] = images_dir
        
        output_dir = self.get_input(
            "Directorio de salida para resultados",
            "outputs/medical_analysis"
        )
        self.config['general']['output_dir'] = output_dir
        
        # Data Loader
        print("\nüì• CONFIGURACI√ìN: CARGA DE DATOS")
        print("-" * 30)
        
        strategy = self.get_multiple_choice(
            "Estrategia para valores faltantes:",
            ["drop", "impute"],
            1
        )
        
        impute_method = "mean"
        if strategy == "impute":
            impute_method = self.get_multiple_choice(
                "M√©todo de imputaci√≥n:",
                ["mean", "median", "mode"],
                1
            )
        
        self.config['pipeline'].append({
            'name': 'data_loader',
            'params': {
                'missing_values_strategy': strategy,
                'impute_method': impute_method
            }
        })
        
        # Descriptive Stats
        print("\nüìä CONFIGURACI√ìN: ESTAD√çSTICAS DESCRIPTIVAS")
        print("-" * 30)
        
        use_stats = self.get_yes_no("¬øIncluir an√°lisis estad√≠stico descriptivo?", "y")
        
        if use_stats:
            group_by = self.get_input(
                "Variable para agrupar an√°lisis (dejar vac√≠o para omitir)",
                "diagnosis",
                required=False
            )
            
            params = {}
            if group_by:
                params['group_by_variable'] = group_by
            
            self.config['pipeline'].append({
                'name': 'descriptive_stats',
                'params': params
            })
        
        # Feature Extraction
        print("\nüîç CONFIGURACI√ìN: EXTRACCI√ìN DE CARACTER√çSTICAS")
        print("-" * 30)
        
        use_features = self.get_yes_no("¬øIncluir extracci√≥n de caracter√≠sticas?", "y")
        
        if use_features:
            strategies = self.get_multiple_selections(
                "Estrategias de extracci√≥n de caracter√≠sticas:",
                ["intensity", "texture", "shape"]
            )
            
            self.config['pipeline'].append({
                'name': 'feature_extraction',
                'params': {
                    'strategies': strategies
                }
            })
        
        # Projection
        print("\nüìà CONFIGURACI√ìN: PROYECCI√ìN Y VISUALIZACI√ìN")
        print("-" * 30)
        
        use_projection = self.get_yes_no("¬øIncluir an√°lisis de proyecci√≥n?", "y")
        
        if use_projection:
            methods = self.get_multiple_selections(
                "M√©todos de proyecci√≥n:",
                ["pca", "tsne", "isomap", "umap"]
            )
            
            color_by = self.get_input(
                "Variable para colorear visualizaciones",
                "diagnosis"
            )
            
            self.config['pipeline'].append({
                'name': 'projection',
                'params': {
                    'methods': methods,
                    'color_by_variable': color_by
                }
            })
        
        # Quality Assurance
        print("\nüîç CONFIGURACI√ìN: CONTROL DE CALIDAD")
        print("-" * 30)
        
        use_qa = self.get_yes_no("¬øIncluir control de calidad?", "y")
        
        if use_qa:
            method = self.get_multiple_choice(
                "M√©todo de detecci√≥n de anomal√≠as:",
                ["IsolationForest", "LocalOutlierFactor", "EllipticEnvelope"],
                0
            )
            
            self.config['pipeline'].append({
                'name': 'quality_assurance',
                'params': {
                    'method': method
                }
            })
    
    def show_config_summary(self):
        """Muestra un resumen de la configuraci√≥n"""
        print("\n" + "=" * 70)
        print("  üìã RESUMEN DE CONFIGURACI√ìN")
        print("=" * 70)
        
        print("\nüìÅ CONFIGURACI√ìN GENERAL:")
        for key, value in self.config['general'].items():
            print(f"  ‚Ä¢ {key}: {value}")
        
        print(f"\nüîÑ PASOS DEL PIPELINE ({len(self.config['pipeline'])}):")
        for i, step in enumerate(self.config['pipeline'], 1):
            print(f"  {i}. {step['name']}")
            if step['params']:
                for param, value in step['params'].items():
                    print(f"     ‚Ä¢ {param}: {value}")
        
        print(f"\n‚úÖ Configuraci√≥n completada con {len(self.config['pipeline'])} pasos.")
    
    def execute_pipeline(self):
        """Ejecuta el pipeline completo"""
        print("\nüöÄ EJECUTANDO PIPELINE")
        print("-" * 50)
        
        # Crear directorio de salida
        output_dir = Path(self.config['general']['output_dir'])
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # Ejecutar cada paso
        for i, step_conf in enumerate(self.config['pipeline'], 1):
            print(f"\nüîÑ Paso {i}/{len(self.config['pipeline'])}: {step_conf['name']}")
            print("-" * 40)
            
            try:
                # Importar y ejecutar el paso
                module = import_module(f"src.steps.{step_conf['name']}")
                step_class_name = ''.join(part.capitalize() for part in step_conf['name'].split('_'))
                StepClass = getattr(module, step_class_name)
                
                step_instance = StepClass(self.data, step_conf.get('params', {}), self.config['general'])
                self.data = step_instance.run()
                
                # Guardar resultados del paso
                if self.data is not None:
                    self.results[step_conf['name']] = self.data
                    print(f"‚úÖ Paso {step_conf['name']} completado exitosamente")
                else:
                    print(f"‚ö†Ô∏è Paso {step_conf['name']} no retorn√≥ datos")
                    
            except Exception as e:
                print(f"‚ùå Error en paso {step_conf['name']}: {e}")
                logging.error(f"Error en paso {step_conf['name']}: {e}")
                continue
        
        # Guardar resultado final
        if self.data is not None:
            if isinstance(self.data, pd.DataFrame):
                final_output_path = output_dir / 'final_output.csv'
                self.data.to_csv(final_output_path, index=False)
                print(f"\nüíæ Resultado final guardado en: {final_output_path}")
        
        print("\n‚úÖ Pipeline completado!")
    
    def visualize_results(self):
        """Visualiza los resultados del pipeline"""
        print("\nüìä VISUALIZANDO RESULTADOS")
        print("-" * 50)
        
        if not self.results:
            print("‚ùå No hay resultados para visualizar")
            return
        
        # Configurar matplotlib para mostrar gr√°ficos
        plt.ion()  # Modo interactivo
        
        # Visualizar estad√≠sticas descriptivas
        if 'descriptive_stats' in self.results:
            self._show_descriptive_stats()
        
        # Visualizar proyecciones
        if 'projection' in self.results:
            self._show_projections()
        
        # Visualizar caracter√≠sticas extra√≠das
        if 'feature_extraction' in self.results:
            self._show_feature_analysis()
        
        # Visualizar control de calidad
        if 'quality_assurance' in self.results:
            self._show_quality_assurance()
        
        print("\nüìà Visualizaciones mostradas. Cierra las ventanas para continuar.")
        plt.show(block=True)
    
    def _show_descriptive_stats(self):
        """Muestra estad√≠sticas descriptivas"""
        print("üìä Mostrando estad√≠sticas descriptivas...")
        
        df = self.results['descriptive_stats']
        if not isinstance(df, pd.DataFrame):
            return
        
        # Mostrar informaci√≥n b√°sica del dataset
        print(f"Dataset: {len(df)} filas, {len(df.columns)} columnas")
        print(f"Columnas: {list(df.columns)}")
        
        # Mostrar primeras filas
        print("\nPrimeras 5 filas:")
        print(df.head())
        
        # Mostrar estad√≠sticas num√©ricas
        numeric_cols = df.select_dtypes(include=[np.number]).columns
        if len(numeric_cols) > 0:
            print(f"\nEstad√≠sticas de columnas num√©ricas ({len(numeric_cols)}):")
            print(df[numeric_cols].describe())
    
    def _show_projections(self):
        """Muestra las proyecciones generadas"""
        print("üìà Mostrando proyecciones...")
        
        output_dir = Path(self.config['general']['output_dir'])
        projection_dir = output_dir / 'projection'
        
        if not projection_dir.exists():
            print("‚ùå No se encontr√≥ directorio de proyecciones")
            return
        
        # Buscar archivos de proyecci√≥n
        projection_files = list(projection_dir.glob('*.png'))
        
        if not projection_files:
            print("‚ùå No se encontraron archivos de proyecci√≥n")
            return
        
        print(f"üìÅ Encontrados {len(projection_files)} archivos de proyecci√≥n:")
        
        # Mostrar cada proyecci√≥n
        for i, file_path in enumerate(projection_files):
            print(f"  {i+1}. {file_path.name}")
            
            # Cargar y mostrar imagen
            try:
           
                img = plt.imread(file_path)
                plt.figure(figsize=(10, 8))
                plt.imshow(img)
                plt.title(f"Proyecci√≥n: {file_path.stem}")
                plt.axis('off')
                plt.tight_layout()
            except Exception as e:
                print(f"‚ùå Error al cargar {file_path}: {e}")
    
    def _show_feature_analysis(self):
        """Muestra an√°lisis de caracter√≠sticas extra√≠das"""
        print("üîç Mostrando an√°lisis de caracter√≠sticas...")
        
        df = self.results['feature_extraction']
        if not isinstance(df, pd.DataFrame):
            return
        
        # Identificar columnas de caracter√≠sticas
        feature_cols = [col for col in df.columns if any(prefix in col for prefix in ['intensity_', 'texture_', 'shape_'])]
        
        if not feature_cols:
            print("‚ùå No se encontraron caracter√≠sticas extra√≠das")
            return
        
        print(f"üìä Caracter√≠sticas extra√≠das ({len(feature_cols)}):")
        for col in feature_cols:
            print(f"  ‚Ä¢ {col}")
        
        # Mostrar estad√≠sticas de caracter√≠sticas
        if len(feature_cols) > 0:
            print(f"\nEstad√≠sticas de caracter√≠sticas:")
            print(df[feature_cols].describe())
            
            # Crear histogramas de caracter√≠sticas
            n_features = len(feature_cols)
            n_cols = min(3, n_features)
            n_rows = (n_features + n_cols - 1) // n_cols
            
            plt.figure(figsize=(15, 5 * n_rows))
            for i, col in enumerate(feature_cols):
                plt.subplot(n_rows, n_cols, i + 1)
                plt.hist(df[col].dropna(), bins=30, alpha=0.7)
                plt.title(f'Distribuci√≥n de {col}')
                plt.xlabel(col)
                plt.ylabel('Frecuencia')
            plt.tight_layout()
    
    def _show_quality_assurance(self):
        """Muestra resultados del control de calidad"""
        print("üîç Mostrando control de calidad...")
        
        output_dir = Path(self.config['general']['output_dir'])
        qa_dir = output_dir / 'quality_assurance'
        
        if not qa_dir.exists():
            print("‚ùå No se encontr√≥ directorio de control de calidad")
            return
        
        # Buscar archivos de anomal√≠as
        anomaly_files = list(qa_dir.glob('*.png'))
        
        if not anomaly_files:
            print("‚ùå No se encontraron archivos de control de calidad")
            return
        
        print(f"üìÅ Encontrados {len(anomaly_files)} archivos de control de calidad:")
        
        # Mostrar cada visualizaci√≥n
        for i, file_path in enumerate(anomaly_files):
            print(f"  {i+1}. {file_path.name}")
            
            try:
                img = plt.imread(file_path)
                plt.figure(figsize=(10, 8))
                plt.imshow(img)
                plt.title(f"Control de Calidad: {file_path.stem}")
                plt.axis('off')
                plt.tight_layout()
            except Exception as e:
                print(f"‚ùå Error al cargar {file_path}: {e}")
    
    def save_config(self, filename: str = "pipeline_config.yaml"):
        """Guarda la configuraci√≥n en un archivo YAML"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                yaml.dump(self.config, f, default_flow_style=False, allow_unicode=True, indent=2)
            print(f"\nüíæ Configuraci√≥n guardada en: {filename}")
            return True
        except Exception as e:
            print(f"\n‚ùå Error al guardar configuraci√≥n: {e}")
            return False
    
    def run(self):
        """Ejecuta el pipeline completo"""
        self.print_header()
        
        # Configurar pipeline
        self.configure_pipeline()
        
        # Mostrar resumen
        self.show_config_summary()
        
        # Confirmar ejecuci√≥n
        if not self.get_yes_no("\n¬øEjecutar el pipeline con esta configuraci√≥n?", "y"):
            print("‚ùå Pipeline cancelado")
            return
        
        # Ejecutar pipeline
        self.execute_pipeline()
        
        # Preguntar si visualizar resultados
        if self.get_yes_no("\n¬øVisualizar resultados?", "y"):
            self.visualize_results()
        
        # Preguntar si guardar configuraci√≥n
        if self.get_yes_no("\n¬øGuardar configuraci√≥n para uso futuro?", "y"):
            filename = self.get_input("Nombre del archivo", "pipeline_config.yaml")
            self.save_config(filename)
        
        print("\nüéâ ¬°An√°lisis completado exitosamente!")

def main():
    """Funci√≥n principal"""
    try:
        pipeline = MedicalAnalysisPipeline()
        pipeline.run()
    except KeyboardInterrupt:
        print("\n\n‚ùå Pipeline cancelado por el usuario.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        logging.error(f"Error inesperado: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 